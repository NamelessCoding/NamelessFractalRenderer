#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0, Rgba16f) uniform image3D worleyS; 

float noise(vec3 uv){
return fract(sin(uv.x*23. + uv.y*345.)*534432.*cos(uv.y*203. + uv.z*353.));
}


float voronoi3d(vec3 uv){

//mouse *= 10.;
vec3 f = floor(uv);
float dist = 99999.;
float ret;
for(int i = 0; i < 27; i++){
vec3 coords = vec3(float(i%3)-1.,float((i/3)%3)-1., float(i/9)-1.);
vec3 curr = (f+coords) + (vec3(noise(f+coords), noise(f+coords+10.), noise(f+coords+20.))-0.5)*0.3;
//curr.xy += mouse*0.1*0.5;
//if(i == 13)curr.xy = (f.xy+coords.xy) + mouse*0.5*0.5;
float h = noise(f+coords);
if(h > 0.3){
curr *= 200.;
}
//if(dist > length(curr-uv)){
//ret = h;
//}
dist = min(dist, length(curr-uv) );
}

return clamp((1.0-dist),0.,1.);
}
float fbmss(vec3 p, float scaleS, int steps)
{
    float scale = 0.1;
    float threshold = 0.5;
    float sum = 0.;
        p += vec3(5., 0., 0.);
        for(int i = 1; i <= steps; i++)
        {
            sum += voronoi3d((p) * scale * pow(2., float(i))) / pow(1.7, float(i));
        }
        return max(sum - threshold, 0.);
}


// Simplex 2D noise
//

#define UI0 1597334673U
#define UI1 3812015801U
#define UI2 uvec2(UI0, UI1)
#define UI3 uvec3(UI0, UI1, 2798796415U)
#define UIF (1.0 / float(0xffffffffU))

vec3 hash33(vec3 p)
{
	uvec3 q = uvec3(ivec3(p)) * UI3;
	q = (q.x ^ q.y ^ q.z)*UI3;
	return -1. + 2. * vec3(q) * UIF;
}

float remap(float x, float a, float b, float c, float d)
{
    return (((x - a) / (b - a)) * (d - c)) + c;
}

// Gradient noise by iq (modified to be tileable)
float gradientNoise(vec3 x, float freq)
{
    // grid
    vec3 p = floor(x);
    vec3 w = fract(x);
    
    // quintic interpolant
    vec3 u = w * w * w * (w * (w * 6. - 15.) + 10.);

    
    // gradients
    vec3 ga = hash33(mod(p + vec3(0., 0., 0.), freq));
    vec3 gb = hash33(mod(p + vec3(1., 0., 0.), freq));
    vec3 gc = hash33(mod(p + vec3(0., 1., 0.), freq));
    vec3 gd = hash33(mod(p + vec3(1., 1., 0.), freq));
    vec3 ge = hash33(mod(p + vec3(0., 0., 1.), freq));
    vec3 gf = hash33(mod(p + vec3(1., 0., 1.), freq));
    vec3 gg = hash33(mod(p + vec3(0., 1., 1.), freq));
    vec3 gh = hash33(mod(p + vec3(1., 1., 1.), freq));
    
    // projections
    float va = dot(ga, w - vec3(0., 0., 0.));
    float vb = dot(gb, w - vec3(1., 0., 0.));
    float vc = dot(gc, w - vec3(0., 1., 0.));
    float vd = dot(gd, w - vec3(1., 1., 0.));
    float ve = dot(ge, w - vec3(0., 0., 1.));
    float vf = dot(gf, w - vec3(1., 0., 1.));
    float vg = dot(gg, w - vec3(0., 1., 1.));
    float vh = dot(gh, w - vec3(1., 1., 1.));
	
    // interpolation
    return va + 
           u.x * (vb - va) + 
           u.y * (vc - va) + 
           u.z * (ve - va) + 
           u.x * u.y * (va - vb - vc + vd) + 
           u.y * u.z * (va - vc - ve + vg) + 
           u.z * u.x * (va - vb - ve + vf) + 
           u.x * u.y * u.z * (-va + vb + vc - vd + ve - vf - vg + vh);
}

// Tileable 3D worley noise
float worleyNoise(vec3 uv, float freq)
{    
    vec3 id = floor(uv);
    vec3 p = fract(uv);
    
    float minDist = 10000.;
    for (float x = -1.; x <= 1.; ++x)
    {
        for(float y = -1.; y <= 1.; ++y)
        {
            for(float z = -1.; z <= 1.; ++z)
            {
                vec3 offset = vec3(x, y, z);
            	vec3 h = hash33(mod(id + offset, vec3(freq))) * .5 + .5;
    			h += offset;
            	vec3 d = p - h;
           		minDist = min(minDist, dot(d, d));
            }
        }
    }
    
    // inverted worley noise
    return 1. - minDist;
}

// Fbm for Perlin noise based on iq's blog
float perlinfbm(vec3 p, float freq, int octaves)
{
    float G = exp2(-.85);
    float amp = 1.;
    float noise = 0.;
    for (int i = 0; i < octaves; ++i)
    {
        noise += amp * gradientNoise(p * freq, freq);
        freq *= 2.;
        amp *= G;
    }
    
    return noise;
}

// Tileable Worley fbm inspired by Andrew Schneider's Real-Time Volumetric Cloudscapes
// chapter in GPU Pro 7.
float worleyFbm(vec3 p, float freq)
{
    return worleyNoise(p*freq, freq) * .625 +
        	 worleyNoise(p*freq*2., freq*2.) * .25 +
        	 worleyNoise(p*freq*4., freq*4.) * .125;
}



void main() {

    
vec3 pos = vec3(gl_GlobalInvocationID.xyz);
 
vec4 worl = vec4(0.);
pos = pos - 256.;
pos /= 256.;
pos += vec3(1000.);
vec2 uv = pos.xy;
vec2 m = pos.zz;
/*worl.x += max(fbmss((pos/256.)*1., 1., 5)-0., 0.);
worl.y += max(fbmss((pos/256.)*2., 1., 6)-0., 0.);
worl.z += max(fbmss((pos/256.)*3., 1., 7)-0., 0.);
worl.w += max(fbmss((pos/256.)*4., 1., 8)-0., 0.);*/

float slices = 512.; // number of layers of the 3d texture
    float freq = 4.;
    
    float pfbm= mix(1., perlinfbm(vec3(uv, floor(m.y*slices)/slices), 4., 7), .5);
    pfbm = abs(pfbm * 2. - 1.); // billowy perlin noise
    
    worl.g += worleyFbm(vec3(uv, floor(m.y*slices)/slices), freq);
    worl.b += worleyFbm(vec3(uv, floor(m.y*slices)/slices), freq*2.);
    worl.a += worleyFbm(vec3(uv, floor(m.y*slices)/slices), freq*4.);
   /* worl.g += max(fbmss((pos/1.)*1., 1., 5)-0., 0.);
    worl.b += max(fbmss((pos/1.)*2., 1., 6)-0., 0.);
    worl.a += max(fbmss((pos/1.)*4., 1., 7)-0., 0.);*/
    worl.r += remap(pfbm, 0., 1., worl.g, 1.); // perlin-worley
    

//worl = vec4(worley(pos/1528., 2.));
imageStore(worleyS, ivec3(gl_GlobalInvocationID.xyz), vec4(worl));


}